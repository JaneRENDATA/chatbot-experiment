- id: 1
  topic: "Python Basics"
  position: "Fundamentals - Chapter 2"
  question: "What are the basic components of Python?"
  answer: |
    Python basics include installation, running Python, and understanding basic syntax.
    ```python
    print("Hello World")
    # Basic indentation
    if True:
        print("Indented")
    ```
  horizontal_prompts: [9, 10, 12]
  vertical_prompts: [2, 3, 4]

- id: 2
  topic: "Python Interpreter Basics"
  position: "Fundamentals - Chapter 2.1"
  question: "How do you use the Python interpreter?"
  answer: |
    The Python interpreter can be used in two modes:
    ```python
    # Script mode: python script.py
    # Interactive mode:
    >>> print("Hello World")
    >>> 2 + 2
    ```
  horizontal_prompts: [3, 4, 5]
  vertical_prompts: [6, 7, 8]

- id: 3
  topic: "Basic Data Types - Numbers"
  position: "Fundamentals - Chapter 3.1.1"
  question: "How do you work with numbers in Python?"
  answer: |
    Python supports integers and floating-point numbers:
    ```python
    x = 5        # integer
    y = 3.14     # float
    z = x + y    # basic arithmetic
    print(type(z))
    ```
  horizontal_prompts: [2, 4, 5]
  vertical_prompts: [6, 7, 8]

- id: 4
  topic: "Basic Data Types - Strings"
  position: "Fundamentals - Chapter 3.1.2"
  question: "How do you handle text in Python?"
  answer: |
    Strings are immutable sequences of characters:
    ```python
    text = "Hello, Python!"
    print(text.upper())
    print(text[0:5])
    print(f"Length: {len(text)}")
    ```
  horizontal_prompts: [2, 3, 5]
  vertical_prompts: [6, 7, 8]

- id: 5
  topic: "Basic Data Types - Lists"
  position: "Fundamentals - Chapter 3.1.3"
  question: "How do you create and use lists?"
  answer: |
    Lists are mutable sequences:
    ```python
    numbers = [1, 2, 3, 4, 5]
    numbers.append(6)
    numbers[0] = 10
    print(numbers)
    ```
  horizontal_prompts: [2, 3, 4]
  vertical_prompts: [6, 7, 8]

- id: 6
  topic: "Basic Operations"
  position: "Fundamentals - Chapter 3.1"
  question: "What are the basic operations in Python?"
  answer: |
    Basic operations include arithmetic and comparisons:
    ```python
    x = 10
    y = 3
    print(x + y)    # addition
    print(x * y)    # multiplication
    print(x > y)    # comparison
    ```
  horizontal_prompts: [7, 8, 9]
  vertical_prompts: [11, 12, 13]

- id: 7
  topic: "Variable Assignment"
  position: "Fundamentals - Chapter 3.2"
  question: "How do you assign values to variables?"
  answer: |
    Variables are assigned using the = operator:
    ```python
    name = "Alice"
    age = 25
    is_student = True
    ```
  horizontal_prompts: [6, 8, 9]
  vertical_prompts: [11, 12, 13]

- id: 8
  topic: "Basic Input/Output"
  position: "Fundamentals - Chapter 3.2"
  question: "How do you handle basic input and output?"
  answer: |
    Use print() for output and input() for input:
    ```python
    name = input("Enter your name: ")
    print(f"Hello, {name}!")
    ```
  horizontal_prompts: [6, 7, 9]
  vertical_prompts: [11, 12, 13]

- id: 9
  topic: "Comments and Documentation"
  position: "Fundamentals - Chapter 3.2"
  question: "How do you add comments in Python?"
  answer: |
    Use # for single-line and ''' for multi-line comments:
    ```python
    # This is a single-line comment
    '''
    This is a
    multi-line comment
    '''
    ```
  horizontal_prompts: [6, 7, 8]
  vertical_prompts: [11, 12, 13]

- id: 10
  topic: "Basic Program Structure"
  position: "Fundamentals - Chapter 3.2"
  question: "What is the basic structure of a Python program?"
  answer: |
    Basic program structure includes statements and blocks:
    ```python
    # Imports
    import math
    
    # Variables
    radius = 5
    
    # Calculations
    area = math.pi * radius ** 2
    
    # Output
    print(f"Area: {area}")
    ```
  horizontal_prompts: [1, 2, 3]
  vertical_prompts: [11, 12, 13]

- id: 11
  topic: "Control Flow Tools"
  position: "Fundamentals - Chapter 4"
  question: "What are control flow tools in Python?"
  answer: |
    Control flow tools in Python include if statements, for loops, and while loops, which control the execution of code blocks.
    Example:
    ```python
    if x > 0:
        print("Positive")
    for i in range(3):
        print(i)
    ```
  horizontal_prompts: [12, 13, 14]
  vertical_prompts: [15, 16, 17]

- id: 12
  topic: "If Statements"
  position: "Fundamentals - Chapter 4.1"
  question: "How do you use if statements in Python?"
  answer: |
    If statements are used to execute code based on conditions.
    Example:
    ```python
    age = 18
    if age >= 18:
        print("Adult")
    else:
        print("Minor")
    ```
  horizontal_prompts: [11, 13, 14]
  vertical_prompts: [15, 16, 17]

- id: 13
  topic: "For Loops"
  position: "Fundamentals - Chapter 4.2"
  question: "How do you use for loops in Python?"
  answer: |
    For loops are used to iterate over sequences like lists or strings.
    Example:
    ```python
    for item in [1, 2, 3]:
        print(item)
    for char in "abc":
        print(char)
    ```
  horizontal_prompts: [11, 12, 14]
  vertical_prompts: [15, 16, 17]

- id: 14
  topic: "While Loops"
  position: "Fundamentals - Chapter 4.3"
  question: "How do you use while loops in Python?"
  answer: |
    While loops are used to execute code repeatedly until a condition is met.
    Example:
    ```python
    while x < 10:
        print(x)
        x += 1
    ```
  horizontal_prompts: [11, 12, 13]
  vertical_prompts: [15, 16, 17]

- id: 15
  topic: "Function Definition and Usage"
  position: "Fundamentals - Chapter 5"
  question: "How do you define and use functions in Python?"
  answer: |
    Functions are defined using the def keyword and are used to organize code into reusable blocks.
    Example:
    ```python
    def greet(name):
        return f"Hello, {name}!"
    print(greet("Alice"))
    ```
  horizontal_prompts: [16, 17, 18]
  vertical_prompts: [19, 20, 21]

- id: 16
  topic: "Lambda Functions"
  position: "Fundamentals - Chapter 5.1"
  question: "How do you use lambda functions?"
  answer: |
    Lambda functions are small, anonymous functions defined with the lambda keyword.
    Example:
    ```python
    add = lambda x, y: x + y
    print(add(5, 3))
    ```
  horizontal_prompts: [15, 17, 18]
  vertical_prompts: [19, 20, 21]

- id: 17
  topic: "Passing Arguments to Functions"
  position: "Fundamentals - Chapter 5.2"
  question: "How do you pass arguments to functions?"
  answer: |
    Arguments can be passed to functions using positional or keyword arguments.
    Example:
    ```python
    def add(x, y):
        return x + y
    print(add(5, 3))
    print(add(x=5, y=3))
    ```
  horizontal_prompts: [15, 16, 18]
  vertical_prompts: [19, 20, 21]

- id: 18
  topic: "Returning Multiple Values from a Function"
  position: "Fundamentals - Chapter 5.3"
  question: "How do you return multiple values from a function?"
  answer: |
    Functions can return multiple values.
    Example:
    ```python
    def get_person_info(name, age):
        return name, age
    person = get_person_info("Alice", 25)
    print(person)
    ```
  horizontal_prompts: [15, 16, 17]
  vertical_prompts: [19, 20, 21]

- id: 19
  topic: "Default Arguments"
  position: "Fundamentals - Chapter 5.4"
  question: "How do you use default arguments?"
  answer: |
    Default arguments allow you to specify a default value for a parameter.
    Example:
    ```python
    def greet(name="World"):
        return f"Hello, {name}!"
    print(greet())
    print(greet("Alice"))
    ```
  horizontal_prompts: [15, 18, 19]
  vertical_prompts: [20, 21, 22]

- id: 20
  topic: "*args and **kwargs"
  position: "Fundamentals - Chapter 5.5"
  question: "How do you use *args and **kwargs?"
  answer: |
    *args and **kwargs allow you to pass a variable number of arguments to a function.
    Example:
    ```python
    def print_args(*args):
        for arg in args:
            print(arg)
    print_args("Hello", 1, True)

    def print_kwargs(**kwargs):
        for key, value in kwargs.items():
            print(f"{key}: {value}")
    print_kwargs(name="Alice", age=25)
    ```
  horizontal_prompts: [15, 19, 20]
  vertical_prompts: [21, 22, 23]

- id: 21
  topic: "Recursive Functions"
  position: "Fundamentals - Chapter 5.6"
  question: "How do you write recursive functions?"
  answer: |
    Recursive functions call themselves.
    Example:
    ```python
    def factorial(n):
        if n == 0 or n == 1:
            return 1
        return n * factorial(n - 1)
    print(factorial(5))
    ```
  horizontal_prompts: [15, 19, 20]
  vertical_prompts: [21, 22, 23]

- id: 22
  topic: "List Operations"
  position: "Fundamentals - Chapter 6"
  question: "How do you work with lists in Python?"
  answer: |
    Lists are ordered, mutable collections. You can add, remove, and access elements by index.
    Example:
    ```python
    numbers = [1, 2, 3]
    numbers.append(4)
    print(numbers[0])
    numbers.remove(2)
    print(numbers)
    ```
  horizontal_prompts: [23, 24, 25]
  vertical_prompts: [26, 27, 28]

- id: 23
  topic: "List Comprehensions"
  position: "Fundamentals - Chapter 6.1"
  question: "How do you use list comprehensions?"
  answer: |
    List comprehensions provide a concise way to create lists.
    Example:
    ```python
    squares = [x**2 for x in range(10)]
    print(squares)
    ```
  horizontal_prompts: [22, 24, 25]
  vertical_prompts: [26, 27, 28]

- id: 24
  topic: "Sorting Lists"
  position: "Fundamentals - Chapter 6.2"
  question: "How do you sort lists?"
  answer: |
    Use the sort() method or sorted() function.
    Example:
    ```python
    numbers = [5, 2, 8, 1, 3]
    numbers.sort()
    print(numbers)
    sorted_numbers = sorted(numbers)
    print(sorted_numbers)
    ```
  horizontal_prompts: [22, 23, 25]
  vertical_prompts: [26, 27, 28]

- id: 25
  topic: "Copying Lists"
  position: "Fundamentals - Chapter 6.3"
  question: "How do you copy lists?"
  answer: |
    Use the copy() method or list slicing.
    Example:
    ```python
    original_list = [1, 2, 3]
    copied_list = original_list.copy()
    print(copied_list)
    copied_list = original_list[:]
    print(copied_list)
    ```
  horizontal_prompts: [22, 23, 24]
  vertical_prompts: [26, 27, 28]

- id: 26
  topic: "Accessing List Elements by Index"
  position: "Fundamentals - Chapter 6.4"
  question: "How do you access list elements by index?"
  answer: |
    Use square brackets with an index.
    Example:
    ```python
    numbers = [1, 2, 3]
    print(numbers[0]) # 1
    print(numbers[1]) # 2
    print(numbers[-1]) # 3 (last element)
    ```
  horizontal_prompts: [22, 25, 27]
  vertical_prompts: [28, 29, 30]

- id: 27
  topic: "Removing Elements from a List"
  position: "Fundamentals - Chapter 6.5"
  question: "How do you remove elements from a list?"
  answer: |
    Use the remove() method or del statement.
    Example:
    ```python
    numbers = [1, 2, 3, 4, 5]
    numbers.remove(3)
    print(numbers)
    del numbers[0]
    print(numbers)
    ```
  horizontal_prompts: [22, 26, 28]
  vertical_prompts: [29, 30, 31]

- id: 28
  topic: "Iterating Over a List"
  position: "Fundamentals - Chapter 6.6"
  question: "How do you iterate over a list?"
  answer: |
    Use a for loop or while loop.
    Example:
    ```python
    for item in [1, 2, 3]:
        print(item)
    i = 0
    while i < len([1, 2, 3]):
        print([1, 2, 3][i])
        i += 1
    ```
  horizontal_prompts: [22, 27, 29]
  vertical_prompts: [30, 31, 32]

- id: 29
  topic: "Dictionary Usage"
  position: "Fundamentals - Chapter 7"
  question: "How do you use dictionaries in Python?"
  answer: |
    Dictionaries are collections of key-value pairs. You can add, access, and remove items by key.
    Example:
    ```python
    person = {"name": "Alice", "age": 25}
    print(person["name"])
    person["age"] = 26
    del person["name"]
    print(person)
    ```
  horizontal_prompts: [30, 31, 32]
  vertical_prompts: [33, 34, 35]

- id: 30
  topic: "Tuples and Sets"
  position: "Fundamentals - Chapter 7.1"
  question: "What are tuples and sets in Python?"
  answer: |
    Tuples are immutable sequences, and sets are unordered collections of unique elements.
    Example:
    ```python
    t = (1, 2, 3)
    s = {1, 2, 3}
    print(t[0])
    s.add(4)
    print(s)
    ```
  horizontal_prompts: [29, 31, 32]
  vertical_prompts: [33, 34, 35]

- id: 31
  topic: "Error and Exception Handling"
  position: "Fundamentals - Chapter 8"
  question: "How do you handle errors and exceptions in Python?"
  answer: |
    Errors and exceptions are handled using try, except, and finally blocks.
    Example:
    ```python
    try:
        x = 1 / 0
    except ZeroDivisionError:
        print("Cannot divide by zero.")
    finally:
        print("Done.")
    ```
  horizontal_prompts: [32, 33, 34]
  vertical_prompts: [36, 37, 38]

- id: 32
  topic: "Common Exception Types"
  position: "Fundamentals - Chapter 8.1"
  question: "What are common exception types in Python?"
  answer: |
    Common exception types include NameError, TypeError, ValueError, ZeroDivisionError, FileNotFoundError, etc.
    Example:
    ```python
    try:
        print(x) # NameError
    except NameError:
        print("Variable 'x' not defined.")
    try:
        print(1 + "2") # TypeError
    except TypeError:
        print("Cannot add int and str.")
    try:
        int("abc") # ValueError
    except ValueError:
        print("Invalid literal for int().")
    ```
  horizontal_prompts: [31, 33, 34]
  vertical_prompts: [36, 37, 38]

- id: 33
  topic: "Raising Exceptions"
  position: "Fundamentals - Chapter 8.2"
  question: "How do you raise exceptions?"
  answer: |
    Use the raise keyword.
    Example:
    ```python
    def check_age(age):
        if age < 0:
            raise ValueError("Age cannot be negative.")
        if age < 18:
            raise ValueError("You must be at least 18 years old.")
    try:
        check_age(-5)
    except ValueError as e:
        print(e)
    ```
  horizontal_prompts: [31, 32, 34]
  vertical_prompts: [36, 37, 38]

- id: 34
  topic: "Creating Custom Exceptions"
  position: "Fundamentals - Chapter 8.3"
  question: "How do you create custom exceptions?"
  answer: |
    Custom exceptions are derived from Exception or BaseException.
    Example:
    ```python
    class CustomError(Exception):
        pass
    try:
        raise CustomError("This is a custom error.")
    except CustomError as e:
        print(e)
    ```
  horizontal_prompts: [31, 32, 33]
  vertical_prompts: [36, 37, 38]

- id: 35
  topic: "Multiple Except Blocks"
  position: "Fundamentals - Chapter 8.4"
  question: "How do you use multiple except blocks?"
  answer: |
    You can have multiple except blocks to handle different types of exceptions.
    Example:
    ```python
    try:
        x = 1 / 0
    except ZeroDivisionError:
        print("Cannot divide by zero.")
    except TypeError:
        print("Operation not supported.")
    ```
  horizontal_prompts: [31, 34, 36]
  vertical_prompts: [37, 38, 39]

- id: 36
  topic: "Else with Try-Except"
  position: "Fundamentals - Chapter 8.5"
  question: "How do you use else with try-except?"
  answer: |
    The else block is executed if no exception occurs.
    Example:
    ```python
    try:
        x = 1 / 2
    except ZeroDivisionError:
        print("Cannot divide by zero.")
    else:
        print("Division successful.")
    ```
  horizontal_prompts: [31, 35, 37]
  vertical_prompts: [38, 39, 40]

- id: 37
  topic: "Handling Exceptions in Functions"
  position: "Fundamentals - Chapter 8.6"
  question: "How do you handle exceptions in functions?"
  answer: |
    Exceptions can be handled within functions.
    Example:
    ```python
    def divide(a, b):
        try:
            return a / b
        except ZeroDivisionError:
            return "Cannot divide by zero."
    print(divide(10, 2))
    print(divide(10, 0))
    ```
  horizontal_prompts: [31, 36, 38]
  vertical_prompts: [39, 40, 41]

- id: 38
  topic: "Classes and Object-Oriented Programming"
  position: "Fundamentals - Chapter 9"
  question: "How do you use classes and OOP in Python?"
  answer: |
    Classes are blueprints for creating objects. OOP allows you to model real-world entities.
    Example:
    ```python
    class Dog:
        def __init__(self, name):
            self.name = name
        def bark(self):
            print(f"{self.name} barks!")
    d = Dog("Buddy")
    d.bark()
    ```
  horizontal_prompts: [39, 40, 41]
  vertical_prompts: [42, 43, 44]

- id: 39
  topic: "Inheritance"
  position: "Fundamentals - Chapter 9.1"
  question: "What is inheritance in Python?"
  answer: |
    Inheritance allows a class to inherit attributes and methods from another class.
    Example:
    ```python
    class Animal:
        def __init__(self, name):
            self.name = name
        def speak(self):
            pass
    class Dog(Animal):
        def bark(self):
            print(f"{self.name} barks!")
    d = Dog("Buddy")
    d.speak()
    d.bark()
    ```
  horizontal_prompts: [38, 40, 41]
  vertical_prompts: [42, 43, 44]

- id: 40
  topic: "Class Methods and Static Methods"
  position: "Fundamentals - Chapter 9.2"
  question: "How do you use class methods and static methods?"
  answer: |
    Class methods are bound to the class and can access class attributes. Static methods are not bound to the class.
    Example:
    ```python
    class Math:
        @classmethod
        def add(cls, a, b):
            return a + b
        @staticmethod
        def multiply(a, b):
            return a * b
    print(Math.add(5, 3))
    print(Math.multiply(5, 3))
    ```
  horizontal_prompts: [38, 39, 41]
  vertical_prompts: [42, 43, 44]

- id: 41
  topic: "Properties in Classes"
  position: "Fundamentals - Chapter 9.3"
  question: "How do you use properties in classes?"
  answer: |
    Properties are used to make attributes read-only or perform actions when accessed.
    Example:
    ```python
    class Person:
        def __init__(self, name):
            self._name = name # Use _name for internal use
        @property
        def name(self):
            return self._name.title()
        @name.setter
        def name(self, value):
            self._name = value.lower()
    p = Person("alice")
    print(p.name)
    p.name = "BOB"
    print(p.name)
    ```
  horizontal_prompts: [38, 39, 40]
  vertical_prompts: [42, 43, 44]

- id: 42
  topic: "Defining Instance Variables"
  position: "Fundamentals - Chapter 9.4"
  question: "How do you define instance variables?"
  answer: |
    Instance variables are defined within the __init__ method.
    Example:
    ```python
    class Dog:
        def __init__(self, name):
            self.name = name
    d1 = Dog("Buddy")
    d2 = Dog("Max")
    print(d1.name)
    print(d2.name)
    ```
  horizontal_prompts: [38, 41, 43]
  vertical_prompts: [44, 45, 46]

- id: 43
  topic: "Creating Multiple Objects"
  position: "Fundamentals - Chapter 9.5"
  question: "How do you create multiple objects?"
  answer: |
    You can create multiple objects by calling the class constructor.
    Example:
    ```python
    class Dog:
        def __init__(self, name):
            self.name = name
    d1 = Dog("Buddy")
    d2 = Dog("Max")
    print(d1.name)
    print(d2.name)
    ```
  horizontal_prompts: [38, 42, 44]
  vertical_prompts: [45, 46, 47]

- id: 44
  topic: "Overriding Methods"
  position: "Fundamentals - Chapter 9.6"
  question: "How do you override methods?"
  answer: |
    You can override methods in a child class.
    Example:
    ```python
    class Animal:
        def speak(self):
            print("Animal speaks")
    class Dog(Animal):
        def speak(self):
            print(f"{self.name} barks!")
    d = Dog("Buddy")
    d.speak()
    ```
  horizontal_prompts: [38, 43, 45]
  vertical_prompts: [46, 47, 48]

- id: 45
  topic: "Virtual Environments and Package Management"
  position: "Fundamentals - Chapter 10"
  question: "How do you manage virtual environments and packages in Python?"
  answer: |
    Virtual environments isolate project dependencies. Use pip to install packages.
    Example:
    ```python
    # Create a virtual environment
    python -m venv venv
    # Activate (Windows)
    venv\Scripts\activate
    # Activate (Unix)
    source venv/bin/activate
    # Install a package
    pip install requests
    ```
  horizontal_prompts: [46, 47, 48]
  vertical_prompts: [49, 50, 51]

- id: 46
  topic: "Listing Installed Packages"
  position: "Fundamentals - Chapter 10.1"
  question: "How do you list installed packages?"
  answer: |
    Use pip list.
    Example:
    ```python
    pip list
    ```
  horizontal_prompts: [45, 47, 48]
  vertical_prompts: [49, 50, 51]

- id: 47
  topic: "Uninstalling Packages"
  position: "Fundamentals - Chapter 10.2"
  question: "How do you uninstall a package?"
  answer: |
    Use pip uninstall.
    Example:
    ```python
    pip uninstall requests
    ```
  horizontal_prompts: [45, 46, 48]
  vertical_prompts: [49, 50, 51]

- id: 48
  topic: "Upgrading Packages"
  position: "Fundamentals - Chapter 10.3"
  question: "How do you upgrade packages?"
  answer: |
    Use pip install --upgrade.
    Example:
    ```python
    pip install --upgrade requests
    ```
  horizontal_prompts: [45, 46, 47]
  vertical_prompts: [49, 50, 51]

- id: 49
  topic: "Freezing Requirements"
  position: "Fundamentals - Chapter 10.4"
  question: "How do you freeze requirements?"
  answer: |
    Use pip freeze.
    Example:
    ```python
    pip freeze > requirements.txt
    ```
  horizontal_prompts: [45, 48, 50]
  vertical_prompts: [51, 52, 53]

- id: 50
  topic: "Using Requirements.txt"
  position: "Fundamentals - Chapter 10.5"
  question: "How do you use requirements.txt?"
  answer: |
    requirements.txt is used to specify project dependencies.
    Example:
    ```python
    requests
    ```
  horizontal_prompts: [45, 49, 51]
  vertical_prompts: [52, 53, 54]

- id: 51
  topic: "Deactivating a Virtual Environment"
  position: "Fundamentals - Chapter 10.6"
  question: "How do you deactivate a virtual environment?"
  answer: |
    Use deactivate.
    Example:
    ```python
    deactivate
    ```
  horizontal_prompts: [45, 48, 50]
  vertical_prompts: [52, 53, 54]

- id: 52
  topic: "Input and Output"
  position: "Fundamentals - Chapter 11"
  question: "How do you handle input and output in Python?"
  answer: |
    Use input() for user input and print() for output. For files, use open(), read(), and write().
    Example:
    ```python
    name = input("Enter your name: ")
    print(f"Hello, {name}!")
    with open("file.txt", "w") as f:
        f.write("Hello, file!")
    ```
  horizontal_prompts: [53, 54, 55]
  vertical_prompts: [56, 57, 58]

- id: 53
  topic: "Reading from a File"
  position: "Fundamentals - Chapter 11.1"
  question: "How do you read from a file?"
  answer: |
    Use open() with 'r' mode.
    Example:
    ```python
    with open("file.txt", "r") as f:
        content = f.read()
    print(content)
    ```
  horizontal_prompts: [52, 54, 55]
  vertical_prompts: [56, 57, 58]

- id: 54
  topic: "Writing to a File"
  position: "Fundamentals - Chapter 11.2"
  question: "How do you write to a file?"
  answer: |
    Use open() with 'w' mode.
    Example:
    ```python
    with open("file.txt", "w") as f:
        f.write("Hello, file!")
    ```
  horizontal_prompts: [52, 53, 55]
  vertical_prompts: [56, 57, 58]

- id: 55
  topic: "Handling File Exceptions"
  position: "Fundamentals - Chapter 11.3"
  question: "How do you handle file exceptions?"
  answer: |
    Use try-except blocks.
    Example:
    ```python
    try:
        with open("non_existent_file.txt", "r") as f:
            content = f.read()
    except FileNotFoundError:
        print("File not found.")
    except Exception as e:
        print(f"An error occurred: {e}")
    ```
  horizontal_prompts: [52, 53, 54]
  vertical_prompts: [56, 57, 58]

- id: 56
  topic: "Appending to a File"
  position: "Fundamentals - Chapter 11.4"
  question: "How do you append to a file?"
  answer: |
    Use open() with 'a' mode.
    Example:
    ```python
    with open("file.txt", "a") as f:
        f.write("\nHello, again!")
    ```
  horizontal_prompts: [52, 55, 57]
  vertical_prompts: [58, 59, 60]

- id: 57
  topic: "Reading a File Line by Line"
  position: "Fundamentals - Chapter 11.5"
  question: "How do you read a file line by line?"
  answer: |
    Use a while loop with readline().
    Example:
    ```python
    with open("file.txt", "r") as f:
        while True:
            line = f.readline()
            if not line:
                break
            print(line.strip())
    ```
  horizontal_prompts: [52, 55, 56]
  vertical_prompts: [58, 59, 60]

- id: 58
  topic: "Checking if a File Exists"
  position: "Fundamentals - Chapter 11.6"
  question: "How do you check if a file exists?"
  answer: |
    Use os.path.exists().
    Example:
    ```python
    import os
    if os.path.exists("file.txt"):
        print("File exists.")
    else:
        print("File does not exist.")
    ```
  horizontal_prompts: [52, 56, 57]
  vertical_prompts: [59, 60, 61]

- id: 59
  topic: "Standard Library Overview"
  position: "Fundamentals - Chapter 12"
  question: "What is the Python standard library?"
  answer: |
    The Python standard library is a collection of modules and packages included with Python, providing tools for various tasks.
    Example:
    ```python
    import math
    print(math.sqrt(16))
    import datetime
    print(datetime.datetime.now())
    ```
  horizontal_prompts: [60, 61, 62]
  vertical_prompts: [63, 64, 65]

- id: 60
  topic: "Some Useful Modules"
  position: "Fundamentals - Chapter 12.1"
  question: "What are some useful modules in the standard library?"
  answer: |
    Some useful modules include math, datetime, os, random, and sys.
    Example:
    ```python
    import math
    print(math.sqrt(16))
    import datetime
    print(datetime.datetime.now())
    ```
  horizontal_prompts: [59, 61, 62]
  vertical_prompts: [63, 64, 65]

- id: 61
  topic: "Using the os Module"
  position: "Fundamentals - Chapter 12.2"
  question: "How do you use the os module?"
  answer: |
    The os module provides functions to interact with the operating system.
    Example:
    ```python
    import os
    print(os.getcwd()) # Get current working directory
    os.chdir("/tmp") # Change directory
    print(os.listdir(".")) # List files in current directory
    ```
  horizontal_prompts: [59, 60, 62]
  vertical_prompts: [63, 64, 65]

- id: 62
  topic: "Using the random Module"
  position: "Fundamentals - Chapter 12.3"
  question: "How do you use the random module?"
  answer: |
    The random module provides functions for generating random numbers and selecting random elements.
    Example:
    ```python
    import random
    print(random.randint(1, 10)) # Integer between 1 and 10
    print(random.choice(["apple", "banana", "cherry"])) # Random choice from list
    ```
  horizontal_prompts: [59, 60, 61]
  vertical_prompts: [63, 64, 65]

- id: 63
  topic: "Importing a Module"
  position: "Fundamentals - Chapter 12.4"
  question: "How do you import a module?"
  answer: |
    Use the import keyword.
    Example:
    ```python
    import math
    ```
  horizontal_prompts: [59, 62, 64]
  vertical_prompts: [65, 66, 67]

- id: 64
  topic: "Finding Documentation"
  position: "Fundamentals - Chapter 12.5"
  question: "How do you find documentation for a module?"
  answer: |
    Use the official Python documentation or pydoc.
    Example:
    ```python
    import math
    help(math.sqrt)
    ```
  horizontal_prompts: [59, 63, 65]
  vertical_prompts: [66, 67, 68]

- id: 65
  topic: "Using help()"
  position: "Fundamentals - Chapter 12.6"
  question: "How do you use help() to learn about modules?"
  answer: |
    help() can be used to get information about modules, classes, and functions.
    Example:
    ```python
    import math
    help(math.sqrt)
    ```
  horizontal_prompts: [59, 64, 66]
  vertical_prompts: [67, 68, 69] 