- id: 1
  position: 3.1.1.1 Integer operations
  question: How are integers used in Python?
  answer: 'Integers in Python are whole numbers without decimal points. Basic arithmetic
    operations include addition, subtraction, and multiplication:

    ```python

    x = 5

    y = 3

    print(x + y)  # 8

    print(x - y)  # 2

    print(x * y)  # 15

    ```

    '
  vertical_prompts:
  - 2
  - 3
  - 4
  - 5
  - 6
  horizontal_prompts:
  - 64
  - 67
  - 83
  - 53
  - 58
- id: 2
  position: 3.1.1.2 Float operations
  question: How are floating-point numbers used in Python?
  answer: 'Floating-point numbers represent numbers with decimal points. Division
    using `/` returns a float, and `//` returns the integer part:

    ```python

    a = 7.0

    b = 3.0

    print(a / b)   # 2.333...

    print(a // b)  # 2.0

    ```

    '
  vertical_prompts:
  - 1
  - 3
  - 4
  - 5
  - 6
  horizontal_prompts:
  - 72
  - 73
  - 17
  - 23
  - 31
- id: 3
  position: 3.1.1.3 Division types (/ and //)
  question: What are the different types of division in Python?
  answer: 'Python supports two types of division: regular division `/` returns a float,
    and floor division `//` returns the integer part of the quotient:

    ```python

    print(7 / 3)   # 2.333...

    print(7 // 3)  # 2

    ```

    '
  vertical_prompts:
  - 1
  - 2
  - 4
  - 5
  - 6
  horizontal_prompts:
  - 64
  - 73
  - 13
  - 26
  - 27
- id: 4
  position: 3.1.1.4 Modulo operator (%)
  question: How is the modulo operator (%) used in Python?
  answer: 'The modulo operator `%` returns the remainder of a division operation:

    ```python

    print(7 % 3)  # 1

    print(10 % 4) # 2

    ```

    '
  vertical_prompts:
  - 1
  - 2
  - 3
  - 5
  - 6
  horizontal_prompts:
  - 5
  - 43
  - 45
  - 18
  - 19
- id: 5
  position: 3.1.1.5 Power operator (**)
  question: How is the power operator (**) used in Python?
  answer: 'The power operator `**` raises a number to the power of another number:

    ```python

    print(2 ** 3)  # 8

    print(5 ** 2)  # 25

    ```

    '
  vertical_prompts:
  - 1
  - 2
  - 3
  - 4
  - 6
  horizontal_prompts:
  - 36
  - 40
  - 44
  - 28
  - 31
- id: 6
  position: 3.1.2.1 String literals
  question: How are string literals defined in Python?
  answer: 'String literals are sequences of characters enclosed in single or double
    quotes:

    ```python

    s1 = ''Hello''

    s2 = "World"

    ```

    '
  vertical_prompts:
  - 7
  - 8
  - 9
  - 10
  - 11
  horizontal_prompts:
  - 64
  - 67
  - 38
  - 77
  - 20
- id: 7
  position: 3.1.2.2 String concatenation
  question: How are strings concatenated in Python?
  answer: 'Strings can be concatenated using the `+` operator:

    ```python

    s = ''Hello'' + '' '' + ''World''

    print(s)  # Hello World

    ```

    '
  vertical_prompts:
  - 6
  - 8
  - 9
  - 10
  - 11
  horizontal_prompts:
  - 65
  - 4
  - 12
  - 88
  - 27
- id: 8
  position: 3.1.2.3 String indexing
  question: How is string indexing performed in Python?
  answer: 'String indexing allows access to individual characters using square brackets:

    ```python

    s = ''Python''

    print(s[0])  # P

    print(s[-1]) # n

    ```

    '
  vertical_prompts:
  - 6
  - 7
  - 9
  - 10
  - 11
  horizontal_prompts:
  - 35
  - 67
  - 69
  - 20
  - 27
- id: 9
  position: 3.1.2.4 String slicing
  question: How is string slicing used in Python?
  answer: 'String slicing extracts a substring using a range of indices:

    ```python

    s = ''Python''

    print(s[1:4])  # yth

    print(s[:2])   # Py

    ```

    '
  vertical_prompts:
  - 6
  - 7
  - 8
  - 10
  - 11
  horizontal_prompts:
  - 42
  - 47
  - 81
  - 55
  - 88
- id: 10
  position: 3.1.2.5 String length
  question: How is the length of a string determined in Python?
  answer: 'The `len()` function returns the number of characters in a string:

    ```python

    s = ''Python''

    print(len(s))  # 6

    ```

    '
  vertical_prompts:
  - 6
  - 7
  - 8
  - 9
  - 11
  horizontal_prompts:
  - 36
  - 8
  - 9
  - 16
  - 51
- id: 11
  position: 3.1.2.6 String immutability
  question: What does it mean that strings are immutable in Python?
  answer: 'Strings in Python cannot be changed after they are created. Any operation
    that modifies a string creates a new string:

    ```python

    s = ''Python''

    s2 = s.replace(''P'', ''J'')

    print(s2)  # Jython

    print(s)   # Python

    ```

    '
  vertical_prompts:
  - 6
  - 7
  - 8
  - 9
  - 10
  horizontal_prompts:
  - 34
  - 5
  - 38
  - 48
  - 87
- id: 12
  position: 3.1.3.1 List creation
  question: How are lists created in Python?
  answer: 'Lists are created using square brackets and can contain elements of any
    type:

    ```python

    numbers = [1, 2, 3]

    words = [''apple'', ''banana'']

    ```

    '
  vertical_prompts:
  - 13
  - 14
  - 15
  - 16
  - 17
  horizontal_prompts:
  - 4
  - 41
  - 88
  - 28
  - 63
- id: 13
  position: 3.1.3.2 List indexing
  question: How is list indexing performed in Python?
  answer: 'List indexing allows access to individual elements using square brackets:

    ```python

    numbers = [10, 20, 30]

    print(numbers[0])  # 10

    print(numbers[-1]) # 30

    ```

    '
  vertical_prompts:
  - 12
  - 14
  - 15
  - 16
  - 17
  horizontal_prompts:
  - 5
  - 71
  - 10
  - 75
  - 21
- id: 14
  position: 3.1.3.3 List slicing
  question: How is list slicing used in Python?
  answer: 'List slicing extracts a sublist using a range of indices:

    ```python

    numbers = [1, 2, 3, 4, 5]

    print(numbers[1:4])  # [2, 3, 4]

    print(numbers[:2])   # [1, 2]

    ```

    '
  vertical_prompts:
  - 12
  - 13
  - 15
  - 16
  - 17
  horizontal_prompts:
  - 74
  - 43
  - 11
  - 12
  - 22
- id: 15
  position: 3.1.3.4 List concatenation
  question: How are lists concatenated in Python?
  answer: 'Lists can be concatenated using the `+` operator:

    ```python

    a = [1, 2]

    b = [3, 4]

    c = a + b

    print(c)  # [1, 2, 3, 4]

    ```

    '
  vertical_prompts:
  - 12
  - 13
  - 14
  - 16
  - 17
  horizontal_prompts:
  - 2
  - 36
  - 54
  - 29
  - 31
- id: 16
  position: 3.1.3.5 List modification
  question: How are lists modified in Python?
  answer: 'Lists can be modified by assigning new values to elements or using methods
    like append and remove:

    ```python

    numbers = [1, 2, 3]

    numbers[0] = 10

    numbers.append(4)

    numbers.remove(2)

    print(numbers)

    ```

    '
  vertical_prompts:
  - 12
  - 13
  - 14
  - 15
  - 17
  horizontal_prompts:
  - 2
  - 10
  - 78
  - 18
  - 26
- id: 17
  position: 3.1.3.6 List nesting
  question: How are nested lists used in Python?
  answer: 'Nested lists are lists that contain other lists as elements:

    ```python

    matrix = [[1, 2], [3, 4]]

    print(matrix[0][1])  # 2

    ```

    '
  vertical_prompts:
  - 12
  - 13
  - 14
  - 15
  - 16
  horizontal_prompts:
  - 64
  - 85
  - 25
  - 60
  - 29
- id: 18
  position: 3.1.3.7 List length
  question: How is the length of a list determined in Python?
  answer: 'The `len()` function returns the number of elements in a list:

    ```python

    numbers = [1, 2, 3, 4]

    print(len(numbers))  # 4

    ```

    '
  vertical_prompts:
  - 12
  - 13
  - 14
  - 15
  - 16
  horizontal_prompts:
  - 65
  - 13
  - 78
  - 82
  - 62
- id: 19
  position: 4.1.1 Basic if syntax
  question: How is a basic if statement written in Python?
  answer: "A basic if statement checks a condition and executes code if the condition\
    \ is true:\n```python\nx = 5\nif x > 0:\n    print('Positive')\n```\n"
  vertical_prompts:
  - 20
  - 21
  - 22
  - 23
  - 24
  horizontal_prompts:
  - 67
  - 42
  - 78
  - 81
  - 31
- id: 20
  position: 4.1.2 elif clause
  question: How is the elif clause used in Python?
  answer: "The elif clause allows checking multiple conditions in sequence:\n```python\n\
    x = 0\nif x > 0:\n    print('Positive')\nelif x == 0:\n    print('Zero')\n```\n"
  vertical_prompts:
  - 19
  - 21
  - 22
  - 23
  - 24
  horizontal_prompts:
  - 43
  - 44
  - 80
  - 85
  - 57
- id: 21
  position: 4.1.3 else clause
  question: How is the else clause used in Python if statements?
  answer: "The else clause provides code to execute if none of the if or elif conditions\
    \ are true:\n```python\nx = -1\nif x > 0:\n    print('Positive')\nelse:\n    print('Not\
    \ positive')\n```\n"
  vertical_prompts:
  - 19
  - 20
  - 22
  - 23
  - 24
  horizontal_prompts:
  - 3
  - 70
  - 18
  - 19
  - 31
- id: 22
  position: 4.1.4 Comparison operators
  question: What are comparison operators in Python and how are they used?
  answer: 'Comparison operators are used to compare values. They include `==`, `!=`,
    `<`, `>`, `<=`, and `>=`:

    ```python

    print(5 == 5)   # True

    print(3 != 4)   # True

    print(2 < 5)    # True

    ```

    '
  vertical_prompts:
  - 19
  - 20
  - 21
  - 23
  - 24
  horizontal_prompts:
  - 35
  - 4
  - 77
  - 51
  - 31
- id: 23
  position: 4.2.1 Basic for loop syntax
  question: How is a basic for loop written in Python?
  answer: "A basic for loop iterates over a sequence of items:\n```python\nfor item\
    \ in [1, 2, 3]:\n    print(item)\n```\n"
  vertical_prompts:
  - 24
  - 25
  - 26
  - 19
  - 20
  horizontal_prompts:
  - 67
  - 7
  - 11
  - 79
  - 61
- id: 24
  position: 4.2.2 Iterating over sequences
  question: How do you iterate over sequences in Python?
  answer: "You can iterate over sequences like lists, tuples, and strings using a\
    \ for loop:\n```python\nfor char in 'abc':\n    print(char)\nfor num in (1, 2,\
    \ 3):\n    print(num)\n```\n"
  vertical_prompts:
  - 23
  - 25
  - 26
  - 19
  - 20
  horizontal_prompts:
  - 33
  - 39
  - 74
  - 84
  - 59
- id: 25
  position: 4.2.3 Loop variables
  question: What are loop variables in Python for loops?
  answer: "Loop variables take the value of each item in the sequence during iteration:\n\
    ```python\nfor fruit in ['apple', 'banana']:\n    print(fruit)\n```\n"
  vertical_prompts:
  - 23
  - 24
  - 26
  - 19
  - 20
  horizontal_prompts:
  - 37
  - 47
  - 84
  - 22
  - 31
- id: 26
  position: 4.2.4 Nested loops
  question: How are nested loops used in Python?
  answer: "Nested loops are loops inside other loops, useful for working with multi-dimensional\
    \ data:\n```python\nfor i in range(2):\n    for j in range(2):\n        print(i,\
    \ j)\n```\n"
  vertical_prompts:
  - 23
  - 24
  - 25
  - 19
  - 20
  horizontal_prompts:
  - 35
  - 41
  - 45
  - 82
  - 19
- id: 27
  position: 4.3.1 range with one argument
  question: How is the range function used with one argument in Python?
  answer: "The range function with one argument generates numbers from 0 up to (but\
    \ not including) that number:\n```python\nfor i in range(3):\n    print(i)  #\
    \ 0, 1, 2\n```\n"
  vertical_prompts:
  - 28
  - 29
  - 23
  - 24
  - 25
  horizontal_prompts:
  - 72
  - 74
  - 77
  - 82
  - 58
- id: 28
  position: 4.3.2 range with start and stop
  question: How is the range function used with start and stop arguments in Python?
  answer: "The range function with start and stop arguments generates numbers from\
    \ start up to (but not including) stop:\n```python\nfor i in range(1, 4):\n  \
    \  print(i)  # 1, 2, 3\n```\n"
  vertical_prompts:
  - 27
  - 29
  - 23
  - 24
  - 25
  horizontal_prompts:
  - 44
  - 80
  - 48
  - 58
  - 29
- id: 29
  position: 4.3.3 range with step
  question: How is the range function used with a step argument in Python?
  answer: "The range function with a step argument generates numbers, incrementing\
    \ by the step value:\n```python\nfor i in range(0, 6, 2):\n    print(i)  # 0,\
    \ 2, 4\n```\n"
  vertical_prompts:
  - 27
  - 28
  - 23
  - 24
  - 25
  horizontal_prompts:
  - 34
  - 38
  - 6
  - 48
  - 81
- id: 30
  position: 4.4.1 break statement usage
  question: How is the break statement used in Python loops?
  answer: "The break statement exits the nearest enclosing loop immediately:\n```python\n\
    for i in range(5):\n    if i == 3:\n        break\n    print(i)\n```\n"
  vertical_prompts:
  - 31
  - 23
  - 24
  - 25
  - 26
  horizontal_prompts:
  - 78
  - 81
  - 18
  - 19
  - 85
- id: 31
  position: 4.4.2 continue statement usage
  question: How is the continue statement used in Python loops?
  answer: "The continue statement skips the rest of the current loop iteration and\
    \ moves to the next iteration:\n```python\nfor i in range(5):\n    if i == 2:\n\
    \        continue\n    print(i)\n# Output: 0, 1, 3, 4\n```\n"
  vertical_prompts:
  - 30
  - 23
  - 24
  - 25
  - 26
  horizontal_prompts:
  - 1
  - 67
  - 10
  - 77
  - 24
- id: 32
  position: 4.8.1 Function definition syntax
  question: How do you define a function in Python?
  answer: "Functions are defined using the `def` keyword, followed by the function\
    \ name and parentheses:\n```python\ndef greet():\n    print('Hello')\n```\n"
  vertical_prompts:
  - 33
  - 34
  - 35
  - 36
  - 37
  horizontal_prompts:
  - 72
  - 75
  - 44
  - 15
  - 20
- id: 33
  position: 4.8.2 Parameters
  question: What are parameters in Python functions?
  answer: "Parameters are variables listed inside the parentheses in the function\
    \ definition:\n```python\ndef add(a, b):\n    return a + b\n```\n"
  vertical_prompts:
  - 32
  - 34
  - 35
  - 36
  - 37
  horizontal_prompts:
  - 1
  - 36
  - 8
  - 21
  - 85
- id: 34
  position: 4.8.3 Return statement
  question: How is the return statement used in Python functions?
  answer: "The `return` statement ends a function and optionally sends a value back\
    \ to the caller:\n```python\ndef square(x):\n    return x * x\n```\n"
  vertical_prompts:
  - 32
  - 33
  - 35
  - 36
  - 37
  horizontal_prompts:
  - 4
  - 71
  - 9
  - 45
  - 59
- id: 35
  position: 4.8.4 Function calls
  question: How do you call a function in Python?
  answer: 'Functions are called by using their name followed by parentheses:

    ```python

    greet()

    result = add(2, 3)

    ```

    '
  vertical_prompts:
  - 32
  - 33
  - 34
  - 36
  - 37
  horizontal_prompts:
  - 33
  - 49
  - 24
  - 25
  - 27
- id: 36
  position: 4.8.5 Scope rules
  question: What are scope rules in Python functions?
  answer: "Scope rules determine where variables can be accessed. Variables defined\
    \ inside a function are local to that function:\n```python\ndef foo():\n    x\
    \ = 10  # local variable\nprint(x)  # Error: x is not defined\n```\n"
  vertical_prompts:
  - 32
  - 33
  - 34
  - 35
  - 37
  horizontal_prompts:
  - 40
  - 72
  - 51
  - 24
  - 26
- id: 37
  position: 4.9.1.1 Setting default values
  question: How do you set default argument values in Python functions?
  answer: "Default argument values are set by assigning a value in the function definition:\n\
    ```python\ndef greet(name='World'):\n    print('Hello,', name)\ngreet()      \
    \  # Hello, World\ngreet('Alice') # Hello, Alice\n```\n"
  vertical_prompts:
  - 38
  - 39
  - 40
  - 41
  - 42
  horizontal_prompts:
  - 40
  - 73
  - 78
  - 83
  - 86
- id: 38
  position: 4.9.1.2 Optional arguments
  question: What are optional arguments in Python functions?
  answer: "Optional arguments are those with default values, allowing the function\
    \ to be called with fewer arguments:\n```python\ndef power(base, exponent=2):\n\
    \    return base ** exponent\nprint(power(3))    # 9\nprint(power(3, 3)) # 27\n\
    ```\n"
  vertical_prompts:
  - 37
  - 39
  - 40
  - 41
  - 42
  horizontal_prompts:
  - 2
  - 67
  - 73
  - 16
  - 28
- id: 39
  position: 4.9.1.3 Mutable default values warning
  question: Why should you avoid using mutable default values in Python functions?
  answer: "Mutable default values like lists or dictionaries can lead to unexpected\
    \ behavior because the same object is used across calls:\n```python\ndef add_item(item,\
    \ items=[]):\n    items.append(item)\n    return items\nprint(add_item(1)) # [1]\n\
    print(add_item(2)) # [1, 2] (unexpected)\n```\n"
  vertical_prompts:
  - 37
  - 38
  - 40
  - 41
  - 42
  horizontal_prompts:
  - 8
  - 45
  - 46
  - 27
  - 30
- id: 40
  position: 4.9.2.1 Named arguments
  question: What are named (keyword) arguments in Python function calls?
  answer: "Named arguments are specified by name in the function call, improving clarity:\n\
    ```python\ndef greet(name, message):\n    print(message, name)\ngreet(name='Alice',\
    \ message='Hi')\n```\n"
  vertical_prompts:
  - 37
  - 38
  - 39
  - 41
  - 42
  horizontal_prompts:
  - 68
  - 39
  - 47
  - 85
  - 61
- id: 41
  position: 4.9.2.2 Argument order
  question: What is the rule for argument order when mixing positional and keyword
    arguments in Python?
  answer: "Positional arguments must come before keyword arguments in a function call:\n\
    ```python\ndef func(a, b, c):\n    pass\nfunc(1, c=3, b=2) # Error: b after c\n\
    func(1, 2, c=3)   # Correct\n```\n"
  vertical_prompts:
  - 37
  - 38
  - 39
  - 40
  - 42
  horizontal_prompts:
  - 64
  - 2
  - 5
  - 42
  - 16
- id: 42
  position: 4.9.2.3 Mixing positional and keyword arguments
  question: How do you mix positional and keyword arguments in Python function calls?
  answer: "You can use both positional and keyword arguments, but positional arguments\
    \ must come first:\n```python\ndef describe(name, age, city):\n    print(name,\
    \ age, city)\ndescribe('Alice', age=30, city='Beijing')\n```\n"
  vertical_prompts:
  - 37
  - 38
  - 39
  - 40
  - 41
  horizontal_prompts:
  - 37
  - 15
  - 53
  - 30
  - 63
- id: 43
  position: 5.1.1.1 append() method
  question: How is the append() method used with lists in Python?
  answer: 'The append() method adds a single element to the end of a list:

    ```python

    numbers = [1, 2, 3]

    numbers.append(4)

    print(numbers)  # [1, 2, 3, 4]

    ```

    '
  vertical_prompts:
  - 44
  - 45
  - 46
  - 47
  - 48
  horizontal_prompts:
  - 7
  - 9
  - 51
  - 23
  - 88
- id: 44
  position: 5.1.1.2 pop() method
  question: How is the pop() method used with lists in Python?
  answer: 'The pop() method removes and returns the last element of a list:

    ```python

    numbers = [1, 2, 3]

    item = numbers.pop()

    print(item)     # 3

    print(numbers)  # [1, 2]

    ```

    '
  vertical_prompts:
  - 43
  - 45
  - 46
  - 47
  - 48
  horizontal_prompts:
  - 42
  - 22
  - 23
  - 26
  - 29
- id: 45
  position: 5.1.1.3 LIFO principle
  question: What is the LIFO principle in the context of Python lists?
  answer: 'LIFO stands for Last-In, First-Out. Lists can be used as stacks, where
    the last element added is the first to be removed:

    ```python

    stack = []

    stack.append(''a'')

    stack.append(''b'')

    print(stack.pop())  # b

    ```

    '
  vertical_prompts:
  - 43
  - 44
  - 46
  - 47
  - 48
  horizontal_prompts:
  - 32
  - 40
  - 85
  - 87
  - 29
- id: 46
  position: 5.1.2.1 append() and pop(0)
  question: How are append() and pop(0) used to implement a queue in Python?
  answer: 'You can use append() to add to the end and pop(0) to remove from the front,
    simulating a queue:

    ```python

    queue = []

    queue.append(''a'')

    queue.append(''b'')

    print(queue.pop(0))  # a

    ```

    '
  vertical_prompts:
  - 43
  - 44
  - 45
  - 47
  - 48
  horizontal_prompts:
  - 65
  - 36
  - 6
  - 12
  - 25
- id: 47
  position: 5.1.2.2 collections.deque
  question: What is collections.deque and how is it used as a queue in Python?
  answer: 'collections.deque provides an efficient queue implementation:

    ```python

    from collections import deque

    queue = deque([''a'', ''b''])

    queue.append(''c'')

    print(queue.popleft())  # a

    ```

    '
  vertical_prompts:
  - 43
  - 44
  - 45
  - 46
  - 48
  horizontal_prompts:
  - 66
  - 39
  - 9
  - 50
  - 85
- id: 48
  position: 5.1.2.3 FIFO principle
  question: What is the FIFO principle in the context of Python lists or queues?
  answer: 'FIFO stands for First-In, First-Out. Queues remove the first element added:

    ```python

    queue = []

    queue.append(''a'')

    queue.append(''b'')

    print(queue.pop(0))  # a

    ```

    '
  vertical_prompts:
  - 43
  - 44
  - 45
  - 46
  - 47
  horizontal_prompts:
  - 67
  - 37
  - 21
  - 55
  - 26
- id: 49
  position: 5.2.1 Deleting list elements
  question: How do you delete elements from a list in Python?
  answer: 'You can delete elements from a list using the del statement or the remove()
    method:

    ```python

    numbers = [1, 2, 3]

    del numbers[1]

    print(numbers)  # [1, 3]

    ```

    '
  vertical_prompts:
  - 50
  - 43
  - 44
  - 45
  - 46
  horizontal_prompts:
  - 77
  - 83
  - 21
  - 86
  - 22
- id: 50
  position: 5.2.2 Deleting variables
  question: How do you delete variables in Python?
  answer: 'The del statement can be used to delete variables entirely:

    ```python

    x = 10

    del x

    # x is now undefined

    ```

    '
  vertical_prompts:
  - 49
  - 43
  - 44
  - 45
  - 46
  horizontal_prompts:
  - 2
  - 35
  - 40
  - 20
  - 26
- id: 51
  position: 5.3.1 Tuple creation
  question: How do you create a tuple in Python?
  answer: 'Tuples are created by placing values inside parentheses, separated by commas:

    ```python

    t = (1, 2, 3)

    print(t)

    ```

    '
  vertical_prompts:
  - 52
  - 53
  - 54
  - 55
  - 56
  horizontal_prompts:
  - 2
  - 68
  - 11
  - 20
  - 21
- id: 52
  position: 5.3.2 Tuple packing
  question: What is tuple packing in Python?
  answer: 'Tuple packing means assigning multiple values to a single tuple variable:

    ```python

    t = 1, 2, 3

    print(t)  # (1, 2, 3)

    ```

    '
  vertical_prompts:
  - 51
  - 53
  - 54
  - 55
  - 56
  horizontal_prompts:
  - 58
  - 18
  - 26
  - 59
  - 30
- id: 53
  position: 5.3.3 Tuple unpacking
  question: What is tuple unpacking in Python?
  answer: 'Tuple unpacking assigns the elements of a tuple to multiple variables:

    ```python

    t = (1, 2, 3)

    a, b, c = t

    print(a, b, c)  # 1 2 3

    ```

    '
  vertical_prompts:
  - 51
  - 52
  - 54
  - 55
  - 56
  horizontal_prompts:
  - 2
  - 8
  - 9
  - 76
  - 24
- id: 54
  position: 5.3.4 Tuple immutability
  question: What does it mean that tuples are immutable in Python?
  answer: 'Tuples cannot be changed after creation. Any attempt to modify a tuple
    will result in an error:

    ```python

    t = (1, 2, 3)

    # t[0] = 10  # Error

    ```

    '
  vertical_prompts:
  - 51
  - 52
  - 53
  - 55
  - 56
  horizontal_prompts:
  - 3
  - 41
  - 47
  - 81
  - 52
- id: 55
  position: 5.4.1 Set creation
  question: How do you create a set in Python?
  answer: 'Sets are created using curly braces or the set() function:

    ```python

    s = {1, 2, 3}

    t = set([4, 5, 6])

    ```

    '
  vertical_prompts:
  - 56
  - 57
  - 58
  - 51
  - 52
  horizontal_prompts:
  - 34
  - 75
  - 19
  - 23
  - 58
- id: 56
  position: 5.4.2 Set operations
  question: What are common set operations in Python?
  answer: 'Sets support operations like union, intersection, and difference:

    ```python

    a = {1, 2, 3}

    b = {2, 3, 4}

    print(a | b)  # union: {1, 2, 3, 4}

    print(a & b)  # intersection: {2, 3}

    print(a - b)  # difference: {1}

    ```

    '
  vertical_prompts:
  - 55
  - 57
  - 58
  - 51
  - 52
  horizontal_prompts:
  - 64
  - 2
  - 87
  - 25
  - 62
- id: 57
  position: 5.4.3 Set comprehensions
  question: What is a set comprehension in Python?
  answer: 'Set comprehensions create sets using a concise syntax:

    ```python

    squares = {x * x for x in range(5)}

    print(squares)  # {0, 1, 4, 9, 16}

    ```

    '
  vertical_prompts:
  - 55
  - 56
  - 58
  - 51
  - 52
  horizontal_prompts:
  - 32
  - 3
  - 4
  - 18
  - 20
- id: 58
  position: 5.4.4 Set methods
  question: What are some useful set methods in Python?
  answer: 'Sets have methods like add(), remove(), and clear():

    ```python

    s = {1, 2}

    s.add(3)

    s.remove(1)

    s.clear()

    ```

    '
  vertical_prompts:
  - 55
  - 56
  - 57
  - 51
  - 52
  horizontal_prompts:
  - 66
  - 6
  - 75
  - 57
  - 25
- id: 59
  position: 5.5.1 Dictionary creation
  question: How do you create a dictionary in Python?
  answer: 'Dictionaries are created using curly braces with key-value pairs:

    ```python

    d = {''a'': 1, ''b'': 2}

    ```

    '
  vertical_prompts:
  - 60
  - 61
  - 62
  - 63
  - 64
  horizontal_prompts:
  - 2
  - 7
  - 8
  - 45
  - 49
- id: 60
  position: 5.5.2 Key-value pairs
  question: What are key-value pairs in Python dictionaries?
  answer: 'Key-value pairs associate a key with a value in a dictionary:

    ```python

    d = {''x'': 10, ''y'': 20}

    print(d[''x''])  # 10

    ```

    '
  vertical_prompts:
  - 59
  - 61
  - 62
  - 63
  - 64
  horizontal_prompts:
  - 2
  - 73
  - 10
  - 57
  - 63
- id: 61
  position: 5.5.3 Accessing values
  question: How do you access values in a Python dictionary?
  answer: 'Values are accessed using their keys:

    ```python

    d = {''a'': 1, ''b'': 2}

    print(d[''a''])  # 1

    ```

    '
  vertical_prompts:
  - 59
  - 60
  - 62
  - 63
  - 64
  horizontal_prompts:
  - 33
  - 2
  - 71
  - 13
  - 18
- id: 62
  position: 5.5.4 Adding/updating entries
  question: How do you add or update entries in a Python dictionary?
  answer: 'Assign a value to a key to add or update an entry:

    ```python

    d = {''a'': 1}

    d[''b''] = 2

    d[''a''] = 3

    print(d)  # {''a'': 3, ''b'': 2}

    ```

    '
  vertical_prompts:
  - 59
  - 60
  - 61
  - 63
  - 64
  horizontal_prompts:
  - 37
  - 16
  - 49
  - 53
  - 31
- id: 63
  position: 5.5.5 Removing entries
  question: How do you remove entries from a Python dictionary?
  answer: 'Use the del statement or pop() method to remove entries:

    ```python

    d = {''a'': 1, ''b'': 2}

    del d[''a'']

    d.pop(''b'')

    print(d)  # {}

    ```

    '
  vertical_prompts:
  - 59
  - 60
  - 61
  - 62
  - 64
  horizontal_prompts:
  - 1
  - 71
  - 48
  - 58
  - 62
- id: 64
  position: 5.5.6 Dictionary methods
  question: What are some useful dictionary methods in Python?
  answer: 'Dictionaries have methods like keys(), values(), and items():

    ```python

    d = {''a'': 1, ''b'': 2}

    print(d.keys())    # dict_keys([''a'', ''b''])

    print(d.values())  # dict_values([1, 2])

    print(d.items())   # dict_items([(''a'', 1), (''b'', 2)])

    ```

    '
  vertical_prompts:
  - 59
  - 60
  - 61
  - 62
  - 63
  horizontal_prompts:
  - 6
  - 73
  - 82
  - 60
  - 29
- id: 65
  position: 5.6.1 items()
  question: How is the items() method used in Python dictionaries?
  answer: "The items() method returns a view of the dictionary’s key-value pairs:\n\
    ```python\nd = {'a': 1, 'b': 2}\nfor k, v in d.items():\n    print(k, v)\n```\n"
  vertical_prompts:
  - 66
  - 67
  - 68
  - 59
  - 60
  horizontal_prompts:
  - 32
  - 70
  - 48
  - 17
  - 58
- id: 66
  position: 5.6.2 enumerate()
  question: How is the enumerate() function used in Python?
  answer: "The enumerate() function adds a counter to an iterable:\n```python\nfor\
    \ idx, value in enumerate(['a', 'b']):\n    print(idx, value)\n```\n"
  vertical_prompts:
  - 65
  - 67
  - 68
  - 59
  - 60
  horizontal_prompts:
  - 40
  - 8
  - 16
  - 51
  - 52
- id: 67
  position: 5.6.3 zip()
  question: How is the zip() function used in Python?
  answer: "The zip() function combines multiple iterables into tuples:\n```python\n\
    a = [1, 2]\nb = ['x', 'y']\nfor pair in zip(a, b):\n    print(pair)\n# (1, 'x'),\
    \ (2, 'y')\n```\n"
  vertical_prompts:
  - 65
  - 66
  - 68
  - 59
  - 60
  horizontal_prompts:
  - 71
  - 14
  - 83
  - 22
  - 27
- id: 68
  position: 5.6.4 sorted()
  question: How is the sorted() function used in Python?
  answer: 'The sorted() function returns a new sorted list from the items of any iterable:

    ```python

    nums = [3, 1, 2]

    print(sorted(nums))  # [1, 2, 3]

    ```

    '
  vertical_prompts:
  - 65
  - 66
  - 67
  - 59
  - 60
  horizontal_prompts:
  - 65
  - 34
  - 39
  - 72
  - 56
- id: 69
  position: 7.1.1.1 f-string syntax
  question: What is the syntax for formatted string literals (f-strings) in Python?
  answer: 'F-strings are prefixed with ''f'' and allow expressions inside curly braces:

    ```python

    name = ''Alice''

    print(f''Hello, {name}!'')  # Hello, Alice!

    ```

    '
  vertical_prompts:
  - 70
  - 71
  - 72
  - 73
  - 74
  horizontal_prompts:
  - 8
  - 14
  - 80
  - 54
  - 26
- id: 70
  position: 7.1.1.2 Expression evaluation
  question: How are expressions evaluated inside f-strings in Python?
  answer: 'Expressions inside curly braces in f-strings are evaluated at runtime:

    ```python

    x = 5

    print(f''{x * 2}'')  # 10

    ```

    '
  vertical_prompts:
  - 69
  - 71
  - 72
  - 73
  - 74
  horizontal_prompts:
  - 69
  - 7
  - 19
  - 55
  - 88
- id: 71
  position: 7.1.1.3 Format specifiers
  question: How do you use format specifiers in f-strings in Python?
  answer: 'Format specifiers control how values are displayed in f-strings:

    ```python

    pi = 3.14159

    print(f''{pi:.2f}'')  # 3.14

    ```

    '
  vertical_prompts:
  - 69
  - 70
  - 72
  - 73
  - 74
  horizontal_prompts:
  - 3
  - 68
  - 76
  - 23
  - 88
- id: 72
  position: 7.1.2.1 Basic formatting
  question: How do you use the format() method for basic string formatting in Python?
  answer: 'The format() method inserts values into placeholders in a string:

    ```python

    print(''Hello, {}''.format(''Bob''))  # Hello, Bob

    ```

    '
  vertical_prompts:
  - 69
  - 70
  - 71
  - 73
  - 74
  horizontal_prompts:
  - 40
  - 41
  - 46
  - 80
  - 83
- id: 73
  position: 7.1.2.2 Positional formatting
  question: How do you use positional arguments with the format() method in Python?
  answer: 'Positional arguments are inserted by their order:

    ```python

    print(''{} {} {}''.format(1, 2, 3))  # 1 2 3

    ```

    '
  vertical_prompts:
  - 69
  - 70
  - 71
  - 72
  - 74
  horizontal_prompts:
  - 6
  - 72
  - 47
  - 24
  - 62
- id: 74
  position: 7.1.2.3 Named formatting
  question: How do you use named arguments with the format() method in Python?
  answer: 'Named arguments are specified by name in the format() method:

    ```python

    print(''Name: {name}, Age: {age}''.format(name=''Alice'', age=30))

    ```

    '
  vertical_prompts:
  - 69
  - 70
  - 71
  - 72
  - 73
  horizontal_prompts:
  - 2
  - 4
  - 56
  - 28
  - 29
- id: 75
  position: 7.2.1.1 open() function
  question: How do you open a file in Python?
  answer: 'Use the open() function to open a file:

    ```python

    f = open(''file.txt'', ''r'')

    ```

    '
  vertical_prompts:
  - 69
  - 70
  - 71
  - 72
  - 73
  horizontal_prompts:
  - 7
  - 41
  - 86
  - 59
  - 29
- id: 76
  position: 7.2.1.2 read() methods
  question: How do you read from a file in Python?
  answer: 'Use the read(), readline(), or readlines() methods to read file contents:

    ```python

    f = open(''file.txt'', ''r'')

    content = f.read()

    f.close()

    ```

    '
  vertical_prompts:
  - 77
  - 78
  - 79
  - 80
  - 69
  horizontal_prompts:
  - 32
  - 73
  - 44
  - 51
  - 63
- id: 77
  position: 7.2.1.3 write() methods
  question: How do you write to a file in Python?
  answer: 'Use the write() or writelines() methods to write to a file:

    ```python

    f = open(''file.txt'', ''w'')

    f.write(''Hello'')

    f.close()

    ```

    '
  vertical_prompts:
  - 76
  - 78
  - 79
  - 80
  - 69
  horizontal_prompts:
  - 8
  - 72
  - 13
  - 14
  - 84
- id: 78
  position: 7.2.1.4 close() method
  question: How do you close a file in Python?
  answer: 'Use the close() method to close a file and free resources:

    ```python

    f = open(''file.txt'', ''r'')

    f.close()

    ```

    '
  vertical_prompts:
  - 76
  - 77
  - 79
  - 80
  - 69
  horizontal_prompts:
  - 2
  - 70
  - 82
  - 52
  - 30
- id: 79
  position: 7.2.1.5 with statement
  question: How do you use the with statement for file operations in Python?
  answer: "The with statement automatically closes the file when done:\n```python\n\
    with open('file.txt', 'r') as f:\n    content = f.read()\n```\n"
  vertical_prompts:
  - 76
  - 77
  - 78
  - 80
  - 69
  horizontal_prompts:
  - 72
  - 14
  - 87
  - 59
  - 28
- id: 80
  position: 8.1.1 Syntax error identification
  question: How do you identify syntax errors in Python code?
  answer: 'Syntax errors are detected by the Python interpreter and usually include
    a message and the line number:

    ```python

    print(''Hello''

    # SyntaxError: unexpected EOF while parsing

    ```

    '
  vertical_prompts:
  - 76
  - 77
  - 78
  - 79
  - 69
  horizontal_prompts:
  - 33
  - 83
  - 85
  - 57
  - 63
- id: 81
  position: 8.1.2 Error messages interpretation
  question: How do you interpret Python error messages?
  answer: 'Error messages provide information about the type and location of the error:

    ```python

    print(1/0)

    # ZeroDivisionError: division by zero

    ```

    '
  vertical_prompts:
  - 82
  - 83
  - 84
  - 85
  - 86
  horizontal_prompts:
  - 12
  - 44
  - 47
  - 51
  - 61
- id: 82
  position: 8.2.1 Common exception types
  question: What are some common exception types in Python?
  answer: 'Common exceptions include ValueError, TypeError, and IndexError:

    ```python

    int(''abc'')  # ValueError

    1 + ''a''    # TypeError

    [][2]      # IndexError

    ```

    '
  vertical_prompts:
  - 81
  - 83
  - 84
  - 85
  - 86
  horizontal_prompts:
  - 70
  - 9
  - 45
  - 85
  - 31
- id: 83
  position: 8.2.2 Exception hierarchy
  question: What is the exception hierarchy in Python?
  answer: "All exceptions inherit from the BaseException class. Most user-defined\
    \ exceptions should inherit from Exception:\n```python\nclass MyError(Exception):\n\
    \    pass\n```\n"
  vertical_prompts:
  - 84
  - 85
  - 81
  - 82
  - 86
  horizontal_prompts:
  - 32
  - 70
  - 79
  - 16
  - 61
- id: 84
  position: 8.2.3 Exception messages
  question: How do you get the message from an exception in Python?
  answer: "Exception messages can be accessed using the str() function or the args\
    \ attribute:\n```python\ntry:\n    1/0\nexcept Exception as e:\n    print(str(e))\n\
    ```\n"
  vertical_prompts:
  - 83
  - 85
  - 81
  - 82
  - 86
  horizontal_prompts:
  - 7
  - 46
  - 16
  - 28
  - 63
- id: 85
  position: 8.3.1 try-except blocks
  question: How do you use try-except blocks in Python?
  answer: "try-except blocks handle exceptions and prevent program crashes:\n```python\n\
    try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')\n\
    ```\n"
  vertical_prompts:
  - 83
  - 84
  - 81
  - 82
  - 86
  horizontal_prompts:
  - 34
  - 11
  - 79
  - 55
  - 25
- id: 86
  position: 8.3.2 Multiple except clauses
  question: How do you use multiple except clauses in Python?
  answer: "Multiple except clauses can handle different exception types:\n```python\n\
    try:\n    int('abc')\nexcept ValueError:\n    print('Value error')\nexcept TypeError:\n\
    \    print('Type error')\n```\n"
  vertical_prompts:
  - 87
  - 88
  - 81
  - 82
  - 83
  horizontal_prompts:
  - 66
  - 41
  - 12
  - 76
  - 57
- id: 87
  position: 8.3.3 else clause
  question: How is the else clause used in try-except blocks in Python?
  answer: "The else clause runs if no exception occurs in the try block:\n```python\n\
    try:\n    x = 1\nexcept Exception:\n    print('Error')\nelse:\n    print('No error')\n\
    ```\n"
  vertical_prompts:
  - 86
  - 88
  - 81
  - 82
  - 83
  horizontal_prompts:
  - 33
  - 38
  - 24
  - 25
  - 27
- id: 88
  position: 8.3.4 finally clause
  question: How is the finally clause used in try-except blocks in Python?
  answer: "The finally clause always runs, whether or not an exception occurred:\n\
    ```python\ntry:\n    x = 1\nexcept Exception:\n    print('Error')\nfinally:\n\
    \    print('Cleanup')\n```\n"
  vertical_prompts:
  - 86
  - 87
  - 81
  - 82
  - 83
  horizontal_prompts:
  - 34
  - 21
  - 55
  - 24
  - 27
